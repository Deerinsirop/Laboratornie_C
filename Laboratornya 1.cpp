//Обязательные
//Упражнение 01. Различия в манипуляции строками(String) – 3 балла
//При выполнении данной задачи вы должны сравнить библиотеки “string.h” или <cstring>(С) и
//<string>(С++).
//А) Перед main() в комментариях /* */ ответьте на вопросы и напишите соответствия С – С++ для
//следующих функций(причем соответствия необязательно будут в виде функций) :
	//1) strlen - в библиотеке < string.h > и <cstring> :определение длины строки без учета нулевого символа в конце строки \0.
	//2) strcpy - в библиотеке < string.h > и <cstring> :это копирование строки из одного char в другой до нулевого элемента.
	//3) strcmp - в библиотеке < string.h > и <cstring> :сравнивает две строки, возвращая 0, если строки идентичны, -1 или 1.
	//4) strcat - добавляет копию строки srcptr в конец строки destptr. Нулевой символ конца строки destptr заменяется первым символом строки srcptr
	//5) someString[index] - в библиотеке <string>(С++) можно получить символ строки по индексу, используя оператор [] (getting the character at index)
	//6) strcat - push_back добавляет символ в конец строки - push_back
	//7) замена в строке последнего символа на нулевой "\0" - pop_back
    // 
	//Функции могут не иметь точного аналога в библиотеке другого языка. Почему? – объясните главную 
	//разницу строк в С и С++: в языке С нет понятия строка, там есть тип char, который используется для одного символа или нескольких.
	//в языке С++ есть тип string, который дейсвтует и ведет себя, как строка.
	//Работать со строками в С++ удобнее, потому что у них есть динамическая память, что позволяет удобнее работать со строками.
    //Недостатком типа string в сравнении с типом char*, есть замедленная скорость обработки данных.
	// 
	//Б
#include <iostream>
#include <string> 
#include <cstring>
int main() {
	system("chcp 1251");
	system("cls");
	setlocale(LC_ALL, "rus");
	std::string alfabet; //инициализировали переменную  
	std::cout << "Введите строку "; //просим написать строку
	std::cin >> alfabet;
	std::string rus;//делаем строки с буквами алфавита русского
	std::string eng;//английского
	std::string znaki;//и знаки тоже в виде строки
	std::string sort = ""; //пустая строка
	rus = "абвгдеёжзийклмнопрстуфхцчшщыъьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ";
	eng = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	znaki = "1234567890\"'/<>;({[)}]-_=+|@#$%^&*";
	//std::cout << alfabet; //проверка работы строки
	for (int i = 0; i < eng.length(); i++) {//тут сравниваем нашу строку с английским алфавитом. Пишем код для прохождения по каждому элементу в алфавите
		for (int j = 0; j < alfabet.length(); j++) {//пишем функцию для прохождения по каждому элементу строки
			if (alfabet[j] == eng[i]) {//сравниваем каждый элемент строки с элементом алфавита
				sort += alfabet[j];//в пустую строку добавляем нашу новую строку

			}
		}
	}

	for (int q = 0; q < rus.length(); q++) {//сравниваем нашу строку с русским алфавитом
		for (int j = 0; j < alfabet.length(); j++) {
			if (alfabet[j] == rus[q]) {
				sort += alfabet[j];
			}
		}
	}
	for (int w = 0; w < znaki.length(); w++) {//сравниваем нашу строку с числами и знаками
		for (int j = 0; j < alfabet.length(); j++) {
			if (alfabet[j] == znaki[w]) {
				sort += alfabet[j];
			}
		}
	}
	std::cout << sort;//выводим нашу переменную с преобразованной строкой
	return 0;
}

//Упражнение 02. Динамическая память в С++. Указатели – 2 балла
//Напишите соответствия С – С++ для следующих операций : 
//1) int* ptr = (int*)malloc(sizeof(int)) - int* ptr = new int
//2) int* ptrArr = (int*)malloc(sizeof(int) * N) - int* ptrArr = new int[N]
//3) free(ptr) - delete ptr
//4) free(ptrArr) - delete[] ptrArr
//В С++ необходимо ли освобождать динамическую память ?
//В С++ необходимо освобождать динамичскую память, потому что при ее переполнении происходит утечка памяти - удаление других элементов для записи новых.
//Можно ли освободить одну и ту же выделенную память дважды ?
//Нет, в C++ нельзя освободить одну и ту же выделенную память дважды, попытка сделать это может привести к неопределенному поведению программы
//А можно ли освободить невыделенную память ? 
// В C++ невыделенную память освободить нельзя, так как невыделенная память - это память, которая не была выделена в программе
//Задание Б
#include "taskTwo.h"
#include <iostream>

void taskTwo() {
	int* high = new int; //высота треугольника в строчках
	int* i = new int;
	int* j = new int;
	int* k = new int;
	std::cout << "Введите нужное количество строк треугольника: ";//запрашиваем высоту треугольника
	std::cin >> *high;
	std::cout << '\n';
		for (*i = 0; *i <= *high; ++*i) {//основной цикл вывода треугольника
		for (*j = 0; *j < *high - *i; ++*j) {//выводим нужное кол-во пробелов
			std::cout << " ";
		}
				for (*k = 0; *k <= *i; ++*k) {//выводим нужное количествово строк
			printf("%d ", hosoyaNumber(i, k));
		}
		std::cout << "\n";
	delete high, i, j, k; //освобождаем память делитом
}